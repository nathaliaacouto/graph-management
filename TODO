Escolher linguagens:
    - Fastapi (backend) [OK]
    - React (frontend) [OK]
    - Lib para grafos ReactJS [DOING]
    - Lib para grafos (networkx) [OK]
    - Config DB (sqlite) [OK]

Funcionalidades:
    - Grafos Direcionados [DONE]
    - Grafos não direcionados [DONE]
    - Com sentido ou não [DONE]
    - Valorados e não valorados [DONE]
    - Entrada [DONE]
        - Definir padrão de entrada [DONE]
        - Inserir um item de cada vez (Vertices e Arestas) [DONE]
        - Inserir informações em lotes [DONE]
            - Arquivos .csv [DONE]
            - Strings [DONE]
    - Visualizar o grafo [DONE]
        - Matriz de adjacência [DONE]
        - Lista de adjacência (Opcional)
        - Matriz de incidência (Opcional)
        - Visualização gráfica (Opcional) [DONE]
        - Download de imagem (Opcional) [DONE]
    - Obter informações
        - Ordem [DONE]
        - Grau [DONE]
    - Dado um vértice
        - Lista de vertices adjacentes
        - Se direcionado:
            - Informar a lista de vértices adjacentes de entrada
            - Informar a lista de vértices adjacentes de saída
        - Informar grau daquele vertice
        - Se direcionado:
            - Informar grau de adjacência de entrada
            - Informar grau de adjacência de saída
    - Dado um par de vertices
        - Informar se os dois vertices são adjacentes ou não
    - Dado um vértice retornar qual a excentricidade do vértice
    - Dado um vértice retornar se o vértice é pendente ou não.
    - Dado um grafo retornar o Raio e o Diâmetro do Grafo.
    - Requisito surpresa 
        - Dado um grafo o sistema deverá informar se o grafo é euleriano ou não
        - E se o grafo é semi-euleriano ou não.

nx.is_eulerian(G)
nx.is_semieulerian(G)
dict(nx.eccentricity(k5))
nx.radius(k5)
nx.diameter(k5)